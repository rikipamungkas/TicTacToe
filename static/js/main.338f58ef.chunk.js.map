{"version":3,"sources":["constants.js","Board.js","utils.js","minimax.js","styles.js","ResultModal.js","TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["SCORES","1","0","2","GAME_STATES","GAME_MODES","mudah","sulit","sangatsulit","Board","grid","makeMove","square","player","getEmptySquares","squares","forEach","i","push","isEmpty","length","getWinner","winningCombos","res","el","winningIndex","getStrikethroughStyles","defaultWidth","clone","concat","this","Array","fill","switchPlayer","getRandomInt","min","max","Math","ceil","floor","random","minimax","board","thisScore","mult","String","maxScore","bestMove","empty","copy","border","css","customStyles","overlay","backgroundColor","ResultModal","isOpen","close","startNewGame","winner","StyledModal","onRequestClose","style","ariaHideApp","ModalWrapper","ModalTitle","ModalContent","ModalFooter","Button","onClick","styled","Modal","div","p","displayName","button","arr","Container","dims","Square","Marker","ButtonRow","Screen","Inner","ChooseText","Strikethrough","styles","TicTacToe","useState","human","computer","players","setPlayers","gameState","setGameState","setGrid","setWinner","nextMove","setNextMove","modalOpen","setModalOpen","medium","mode","setMode","useEffect","winnerStr","setTimeout","declareWinner","move","useCallback","index","gridCopy","computerMove","emptyIndices","easy","includes","difficult","timeout","clearTimeout","choosePlayer","option","onChange","e","target","value","Object","keys","map","key","gameMode","isActive","data-testid","humanMove","Main","main","Footer","footer","FooterInner","App","href","Boolean","window","location","hostname","match","setAppElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.338f58ef.chunk.js","sourcesContent":["//Board dimensions\r\nexport const DIMS = 3;\r\nexport const DRAW = 0;\r\nexport const PLAYER_X = 1;\r\nexport const PLAYER_O = 2;\r\nexport const SCORES = {\r\n  1: 1,\r\n  0: 0,\r\n  2: -1\r\n};\r\nexport const SQUARE_DIMS = 100;\r\nexport const GAME_STATES = {\r\n  notStarted: \"not_started\",\r\n  inProgress: \"in_progress\",\r\n  over: \"over\"\r\n};\r\n\r\nexport const GAME_MODES = {\r\n  mudah: \"Mudah\",\r\n  sulit: \"Sulit\",\r\n  sangatsulit: \"Sangat Sulit\"\r\n};\r\n","import { DIMS, DRAW } from \"./constants\";\r\n\r\nexport default class Board {\r\n  constructor(grid) {\r\n    this.grid = grid || new Array(DIMS ** 2).fill(null);\r\n    this.winningIndex = null;\r\n  }\r\n\r\n  makeMove = (square, player) => {\r\n    if (this.grid[square] === null) {\r\n      this.grid[square] = player;\r\n    }\r\n  };\r\n\r\n  // Collect indices of empty squares and return them\r\n  getEmptySquares = (grid = this.grid) => {\r\n    let squares = [];\r\n    grid.forEach((square, i) => {\r\n      if (square === null) squares.push(i);\r\n    });\r\n    return squares;\r\n  };\r\n\r\n  isEmpty = (grid = this.grid) => {\r\n    return this.getEmptySquares(grid).length === DIMS ** 2;\r\n  };\r\n\r\n  getWinner = (grid = this.grid) => {\r\n    const winningCombos = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    let res = null;\r\n    winningCombos.forEach((el, i) => {\r\n      if (\r\n        grid[el[0]] !== null &&\r\n        grid[el[0]] === grid[el[1]] &&\r\n        grid[el[0]] === grid[el[2]]\r\n      ) {\r\n        res = grid[el[0]];\r\n        this.winningIndex = i;\r\n      } else if (res === null && this.getEmptySquares(grid).length === 0) {\r\n        res = DRAW;\r\n        this.winningIndex = null;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  /**\r\n   * Get the styles for strike through based on the combination that won\r\n   */\r\n  getStrikethroughStyles = () => {\r\n    const defaultWidth = 285;\r\n    const diagonalWidth = 400;\r\n    switch (this.winningIndex) {\r\n      case 0:\r\n        return `\r\n          transform: none;\r\n          top: 41px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 1:\r\n        return `\r\n          transform: none;\r\n          top: 140px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 2:\r\n        return `\r\n          transform: none;\r\n          top: 242px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 3:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: -86px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 4:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 5:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: 115px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 6:\r\n        return `\r\n          transform: rotate(45deg);\r\n          top: 145px;\r\n          left: -44px;\r\n          width: ${diagonalWidth}px;\r\n        `;\r\n      case 7:\r\n        return `\r\n          transform: rotate(-45deg);\r\n          top: 145px;\r\n          left: -46px;\r\n          width: ${diagonalWidth}px;\r\n        `;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  clone = () => {\r\n    return new Board(this.grid.concat());\r\n  };\r\n}\r\n","import { PLAYER_O, PLAYER_X } from \"./constants\";\r\n\r\nexport const switchPlayer = player => {\r\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\r\n};\r\n\r\nexport const getRandomInt = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n","import { SCORES } from \"./constants\";\r\nimport { switchPlayer } from \"./utils\";\r\n\r\nexport const minimax = (board, player) => {\r\n  const mult = SCORES[String(player)];\r\n  let thisScore;\r\n  let maxScore = -1;\r\n  let bestMove = null;\r\n\r\n  if (board.getWinner() !== null) {\r\n    return [SCORES[board.getWinner()], 0];\r\n  } else {\r\n    for (let empty of board.getEmptySquares()) {\r\n      let copy = board.clone();\r\n      copy.makeMove(empty, player);\r\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n      if (thisScore >= maxScore) {\r\n        maxScore = thisScore;\r\n        bestMove = empty;\r\n      }\r\n    }\r\n\r\n    return [mult * maxScore, bestMove];\r\n  }\r\n};\r\n","import { css } from \"styled-components\";\r\n\r\nexport const border = css`\r\n  border-bottom-left-radius: 15px 255px;\r\n  border-bottom-right-radius: 225px 15px;\r\n  border-top-left-radius: 255px 15px;\r\n  border-top-right-radius: 15px 225px;\r\n  border: 2px solid #41403e;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Modal from \"react-modal\";\r\nimport { border } from \"./styles\";\r\n\r\nconst customStyles = {\r\n  overlay: {\r\n    backgroundColor: \"rgba(0,0,0, 0.6)\"\r\n  }\r\n};\r\n\r\nexport const ResultModal = ({ isOpen, close, startNewGame, winner }) => {\r\n  return (\r\n    <StyledModal\r\n      isOpen={isOpen}\r\n      onRequestClose={close}\r\n      style={customStyles}\r\n      ariaHideApp={false}\r\n    >\r\n      <ModalWrapper>\r\n        <ModalTitle>Game over</ModalTitle>\r\n        <ModalContent>{winner}</ModalContent>\r\n\r\n        <ModalFooter>\r\n          <Button onClick={close}>Close</Button>\r\n          <Button onClick={startNewGame}>Start over</Button>\r\n        </ModalFooter>\r\n      </ModalWrapper>\r\n    </StyledModal>\r\n  );\r\n};\r\nconst StyledModal = styled(Modal)`\r\n  height: 300px;\r\n  position: relative;\r\n  margin: 0 auto;\r\n  top: 10%;\r\n  right: auto;\r\n  bottom: auto;\r\n  width: 320px;\r\n  outline: none;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst ModalWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 24px;\r\n  background-color: #fff;\r\n  max-height: 100%;\r\n  height: 100%;\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  padding: 1.25rem;\r\n  ${border};\r\n`;\r\n\r\nconst ModalTitle = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst ModalContent = styled.p`\r\n  flex: 1 1 auto;\r\n  text-align: center;\r\n`;\r\nModalContent.displayName = \"ModalContent\";\r\n\r\nconst ModalFooter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex: 0 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 16px;\r\n`;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  PLAYER_X,\r\n  PLAYER_O,\r\n  SQUARE_DIMS,\r\n  DRAW,\r\n  GAME_STATES,\r\n  DIMS,\r\n  GAME_MODES\r\n} from \"./constants\";\r\nimport Board from \"./Board\";\r\nimport { getRandomInt, switchPlayer } from \"./utils\";\r\nimport { minimax } from \"./minimax\";\r\nimport { ResultModal } from \"./ResultModal\";\r\nimport { border } from \"./styles\";\r\n\r\nconst arr = new Array(DIMS ** 2).fill(null);\r\nconst board = new Board();\r\n\r\nconst TicTacToe = ({ squares = arr }) => {\r\n  const [players, setPlayers] = useState({ human: null, computer: null });\r\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\r\n  const [grid, setGrid] = useState(squares);\r\n  const [winner, setWinner] = useState(null);\r\n  const [nextMove, setNextMove] = useState(null);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [mode, setMode] = useState(GAME_MODES.medium);\r\n\r\n  /**\r\n   * On every move, check if there is a winner. If yes, set game state to over and open result modal\r\n   */\r\n  useEffect(() => {\r\n    const winner = board.getWinner(grid);\r\n    const declareWinner = winner => {\r\n      let winnerStr;\r\n      switch (winner) {\r\n        case PLAYER_X:\r\n          winnerStr = \"Player X wins!\";\r\n          break;\r\n        case PLAYER_O:\r\n          winnerStr = \"Player O wins!\";\r\n          break;\r\n        case DRAW:\r\n        default:\r\n          winnerStr = \"It's a draw\";\r\n      }\r\n      setGameState(GAME_STATES.over);\r\n      setWinner(winnerStr);\r\n      // Slight delay for the modal so there is some time to see the last move\r\n      setTimeout(() => setModalOpen(true), 300);\r\n    };\r\n\r\n    if (winner !== null && gameState !== GAME_STATES.over) {\r\n      declareWinner(winner);\r\n    }\r\n  }, [gameState, grid, nextMove]);\r\n\r\n  /**\r\n   * Set the grid square with respective player that made the move. Only make a move when the game is in progress.\r\n   * useCallback is necessary to prevent unnecessary recreation of the function, unless gameState changes, since it is\r\n   * being tracked in useEffect\r\n   * @type {Function}\r\n   */\r\n  const move = useCallback(\r\n    (index, player) => {\r\n      if (player && gameState === GAME_STATES.inProgress) {\r\n        setGrid(grid => {\r\n          const gridCopy = grid.concat();\r\n          gridCopy[index] = player;\r\n          return gridCopy;\r\n        });\r\n      }\r\n    },\r\n    [gameState]\r\n  );\r\n\r\n  /**\r\n   * Make computer move. If it's the first move (board is empty), make move at any random cell to skip\r\n   * unnecessary minimax calculations\r\n   * @type {Function}\r\n   */\r\n  const computerMove = useCallback(() => {\r\n    // Important to pass a copy of the grid here\r\n    const board = new Board(grid.concat());\r\n    const emptyIndices = board.getEmptySquares(grid);\r\n    let index;\r\n    switch (mode) {\r\n      case GAME_MODES.easy:\r\n        do {\r\n          index = getRandomInt(0, 8);\r\n        } while (!emptyIndices.includes(index));\r\n        break;\r\n      case GAME_MODES.medium:\r\n        // Medium level is basically ~half of the moves are minimax and the other ~half random\r\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\r\n        if (smartMove) {\r\n          index = minimax(board, players.computer)[1];\r\n        } else {\r\n          do {\r\n            index = getRandomInt(0, 8);\r\n          } while (!emptyIndices.includes(index));\r\n        }\r\n        break;\r\n      case GAME_MODES.difficult:\r\n      default:\r\n        index = board.isEmpty(grid)\r\n          ? getRandomInt(0, 8)\r\n          : minimax(board, players.computer)[1];\r\n    }\r\n    if (!grid[index]) {\r\n      move(index, players.computer);\r\n      setNextMove(players.human);\r\n    }\r\n  }, [move, grid, players, mode]);\r\n\r\n  /**\r\n   * Make computer move when it's computer's turn\r\n   */\r\n  useEffect(() => {\r\n    let timeout;\r\n    if (\r\n      nextMove !== null &&\r\n      nextMove === players.computer &&\r\n      gameState !== GAME_STATES.over\r\n    ) {\r\n      // Delay computer moves to make them more natural\r\n      timeout = setTimeout(() => {\r\n        computerMove();\r\n      }, 500);\r\n    }\r\n    return () => timeout && clearTimeout(timeout);\r\n  }, [nextMove, computerMove, players.computer, gameState]);\r\n\r\n  const humanMove = index => {\r\n    if (!grid[index] && nextMove === players.human) {\r\n      move(index, players.human);\r\n      setNextMove(players.computer);\r\n    }\r\n  };\r\n\r\n  const choosePlayer = option => {\r\n    setPlayers({ human: option, computer: switchPlayer(option) });\r\n    setGameState(GAME_STATES.inProgress);\r\n    setNextMove(PLAYER_X);\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    setGameState(GAME_STATES.notStarted);\r\n    setGrid(arr);\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const changeMode = e => {\r\n    setMode(e.target.value);\r\n  };\r\n\r\n  return gameState === GAME_STATES.notStarted ? (\r\n    <Screen>\r\n      <Inner>\r\n        <ChooseText>Select difficulty</ChooseText>\r\n        <select onChange={changeMode} value={mode}>\r\n          {Object.keys(GAME_MODES).map(key => {\r\n            const gameMode = GAME_MODES[key];\r\n            return (\r\n              <option key={gameMode} value={gameMode}>\r\n                {key}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </Inner>\r\n      <Inner>\r\n        <ChooseText>Choose your player</ChooseText>\r\n        <ButtonRow>\r\n          <button onClick={() => choosePlayer(PLAYER_X)}>X</button>\r\n          <p>or</p>\r\n          <button onClick={() => choosePlayer(PLAYER_O)}>O</button>\r\n        </ButtonRow>\r\n      </Inner>\r\n    </Screen>\r\n  ) : (\r\n    <Container dims={DIMS}>\r\n      {grid.map((value, index) => {\r\n        const isActive = value !== null;\r\n\r\n        return (\r\n          <Square\r\n            data-testid={`square_${index}`}\r\n            key={index}\r\n            onClick={() => humanMove(index)}\r\n          >\r\n            {isActive && <Marker>{value === PLAYER_X ? \"X\" : \"O\"}</Marker>}\r\n          </Square>\r\n        );\r\n      })}\r\n      <Strikethrough\r\n        styles={\r\n          gameState === GAME_STATES.over && board.getStrikethroughStyles()\r\n        }\r\n      />\r\n      <ResultModal\r\n        isOpen={modalOpen}\r\n        winner={winner}\r\n        close={() => setModalOpen(false)}\r\n        startNewGame={startNewGame}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: ${({ dims }) => `${dims * (SQUARE_DIMS + 5)}px`};\r\n  flex-flow: wrap;\r\n  position: relative;\r\n`;\r\n\r\nconst Square = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: ${SQUARE_DIMS}px;\r\n  height: ${SQUARE_DIMS}px;\r\n  ${border};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nSquare.displayName = \"Square\";\r\n\r\nconst Marker = styled.p`\r\n  font-size: 68px;\r\n`;\r\n\r\nconst ButtonRow = styled.div`\r\n  display: flex;\r\n  width: 150px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Screen = styled.div``;\r\n\r\nconst Inner = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\nconst ChooseText = styled.p``;\r\n\r\nconst Strikethrough = styled.div`\r\n  position: absolute;\r\n  ${({ styles }) => styles}\r\n  background-color: indianred;\r\n  height: 5px;\r\n  width: ${({ styles }) => !styles && \"0px\"};\r\n`;\r\n\r\nexport default TicTacToe;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TicTacToe from \"./TicTacToe\";\r\nimport \"papercss/dist/paper.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Main>\r\n        <TicTacToe />\r\n      </Main>\r\n      <Footer>\r\n        <FooterInner>\r\n          Thanks To{\" \"}\r\n          <a href=\"https://github.com/Clarity-89/React_tic_tac_toe\">Clarity 89</a>\r\n        </FooterInner>\r\n      </Footer>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Main = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1 0 auto;\r\n`;\r\n\r\nconst Footer = styled.footer`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n  flex: 0 0 auto;\r\n`;\r\n\r\nconst FooterInner = styled.div`\r\n  padding: 16px 0;\r\n`;\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement(\"#root\");\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}